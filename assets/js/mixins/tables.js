// Generated by CoffeeScript 1.6.3
(function() {
  var LineWrapper;

  LineWrapper = require('../../../node_modules/pdfkit/js/line_wrapper');

  module.exports = {
    initTables: function() {
      return console.log('init tables');
    },
    table: function(data, options) {
      var row, rowIndex, _i, _len;
      this.tableOptions = options;
      this.rowY = this.tableOptions.y || this.page.margins.top + this.tableOptions.margins.top;
      this.printHeaderRow();
      for (rowIndex = _i = 0, _len = data.length; _i < _len; rowIndex = ++_i) {
        row = data[rowIndex];
        this.printRow(rowIndex, row);
      }
      this.y += this.tableOptions.padding.bottom + this.tableOptions.margins.bottom;
      return this.x = this.tableOptions.margins.left;
    },
    printRow: function(rowIndex, row) {
      var col, colIndex, _i, _j, _len, _len1, _ref, _ref1;
      this.rowHeight = this.getRowHeight(row);
      if (this.rowY + this.rowHeight > this.page.height - this.page.margins.bottom) {
        this.addPage();
        this.rowY = this.page.margins.top + this.tableOptions.margins.top;
        this.printHeaderRow();
        this.rowHeight = this.getRowHeight(row);
      }
      _ref = this.tableOptions.columns;
      for (colIndex = _i = 0, _len = _ref.length; _i < _len; colIndex = ++_i) {
        col = _ref[colIndex];
        this.printCol(rowIndex, row, colIndex, col);
      }
      this.moveTo(this.tableOptions.margins.left + this.getWidth(), this.rowY + this.rowHeight).lineTo(this.tableOptions.margins.left, this.rowY + this.rowHeight).stroke();
      if (this.needsVerticalLines()) {
        _ref1 = this.tableOptions.columns;
        for (colIndex = _j = 0, _len1 = _ref1.length; _j < _len1; colIndex = ++_j) {
          col = _ref1[colIndex];
          this.moveTo(this.getXOfColumn(colIndex), this.rowY).lineTo(this.getXOfColumn(colIndex), this.rowY + this.rowHeight).stroke();
        }
        this.moveTo(this.tableOptions.margins.left + this.getWidth(), this.rowY).lineTo(this.tableOptions.margins.left + this.getWidth(), this.rowY + this.rowHeight).stroke();
      }
      return this.rowY += this.rowHeight;
    },
    printCol: function(rowIndex, row, colIndex, col) {
      var colOpt, text;
      colOpt = this.tableOptions.columns[colIndex];
      text = row[col.id] || '';
      if (colOpt.renderer) {
        text = colOpt.renderer(text, rowIndex, row, colIndex, col);
      }
      return this.font(this.tableOptions.font).text(text, this.getXOfColumn(colIndex) + this.tableOptions.padding.left, this.rowY + this.tableOptions.padding.top, {
        width: this.getColWidth(colIndex)
      });
    },
    printHeaderRow: function() {
      var col, colIndex, _i, _j, _len, _len1, _ref, _ref1;
      this.rowHeight = 30;
      _ref = this.tableOptions.columns;
      for (colIndex = _i = 0, _len = _ref.length; _i < _len; colIndex = ++_i) {
        col = _ref[colIndex];
        this.printHeaderCol(colIndex);
      }
      this.moveTo(this.tableOptions.margins.left, this.rowY).lineTo(this.tableOptions.margins.left + this.getWidth(), this.rowY).lineTo(this.tableOptions.margins.left + this.getWidth(), this.rowY + 1).lineTo(this.tableOptions.margins.left, this.rowY + 1).stroke();
      this.moveTo(this.tableOptions.margins.left + this.getWidth(), this.rowY + this.rowHeight).lineTo(this.tableOptions.margins.left, this.rowY + this.rowHeight).lineTo(this.tableOptions.margins.left + this.getWidth(), this.rowY + this.rowHeight + 1).lineTo(this.tableOptions.margins.left, this.rowY + this.rowHeight + 1).stroke();
      if (this.needsVerticalLines()) {
        _ref1 = this.tableOptions.columns;
        for (colIndex = _j = 0, _len1 = _ref1.length; _j < _len1; colIndex = ++_j) {
          col = _ref1[colIndex];
          this.moveTo(this.getXOfColumn(colIndex), this.rowY).lineTo(this.getXOfColumn(colIndex), this.rowY + this.rowHeight).stroke();
        }
        this.moveTo(this.tableOptions.margins.left + this.getWidth(), this.rowY).lineTo(this.tableOptions.margins.left + this.getWidth(), this.rowY + this.rowHeight).stroke();
      }
      return this.rowY += this.rowHeight;
    },
    printHeaderCol: function(colIndex) {
      return this.font(this.tableOptions.boldFont).text(this.tableOptions.columns[colIndex].name || '', this.getXOfColumn(colIndex) + this.tableOptions.padding.left, this.rowY + this.tableOptions.padding.top, {
        width: this.getColWidth(colIndex)
      });
    },
    getColWidth: function(colIndex) {
      return this.getXOfColumn(colIndex + 1) - this.getXOfColumn(colIndex) - this.tableOptions.padding.left;
    },
    getRowHeight: function(row) {
      var col, colIndex, height, line, maxHeight, wrapper, _i, _len, _ref;
      maxHeight = 0;
      _ref = this.tableOptions.columns;
      for (colIndex = _i = 0, _len = _ref.length; _i < _len; colIndex = ++_i) {
        col = _ref[colIndex];
        height = 0;
        line = function() {
          return height += this.currentLineHeight(true);
        };
        wrapper = new LineWrapper(this, {});
        wrapper.on('line', line.bind(this));
        wrapper.wrap(row[col.id] + '' || '', {
          width: this.getColWidth(colIndex)
        });
        if (height > maxHeight) {
          maxHeight = height;
        }
      }
      return maxHeight + this.tableOptions.padding.bottom + 8;
    },
    getXOfColumn: function(colIndex) {
      var col, i, perc, _i, _len, _ref;
      perc = 0;
      _ref = this.tableOptions.columns;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        col = _ref[i];
        if (i < colIndex) {
          perc += col.width;
        }
      }
      return this.tableOptions.margins.left + (this.getWidth() * perc / 100);
    },
    needsVerticalLines: function() {
      return !this.tableOptions.noVerticalLines || this.tableOptions.noVerticalLines === false;
    },
    getWidth: function() {
      return this.page.width - (this.tableOptions.margins.left + this.tableOptions.margins.right);
    }
  };

}).call(this);
